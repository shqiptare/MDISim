// ~/c/MyClib/StrConv.h

#ifndef StrConv_h
#define StrConv_h 1

// use next to turn on/off use of inline,  to check on gcc 4.5, 4.7 code mixing dynamic library malloc problems - which turned out to be generated by AquaTerm lib
#define StrConv_UseInline 1

char* CopToNewC_String(const string& s);   // copy chars of string to a new c-string Stroustrup3 p.590
char* CstrToLower(char* cstr);  // convert chars to lower case in place, see MSL C++ ref  p. 563
char* CstrToUpper(char* cstr);  // same but upper
void ToLower(string& s); // convert in place
void ToUpper(string& s); // convert in place
string CopToLower(const string& s);// return new copy of string s with all chars set to lower case
string CopToUpper(const string& s);// return new copy of string s with all chars set to upper case

// 9/2013 string ToAscii(int i)    removed, use standard to_string instead
//#if (__GNUC__>3) && (__GNUC_MINOR__>4) // C++11 to_string should exist      ---- problem on Maverik, already there, needs better check on compiler
//#else
#if __cplusplus >= 201103L // C++11 on,  to_string should exist
#else
  #ifndef _GLIBCXX_BITSET // better protect against to_string being already there
    #ifndef _LIBCPP_STRING // better protect against to_string being already there
      inline string to_string(int i) { ostringstream ostr; ostr << i; return ostr.str(); } // provide to_string for older compilers       http://www.cplusplus.com/reference/string/to_string/
    #endif
  #endif
#endif

#ifdef StrConv_UseInline
  //old inline string ToAscii(int i) { ostringstream ostr; ostr << i; return ostr.str(); }  // use to_string
  inline string CtimeStr(const time_t* c,     const unsigned int verbose=0) { return string(ctime(c)).substr(0,24); } // my C++ String version of ctime without '\n' at end   time_t is same as unsigned int
  inline string CtimeStr(const unsigned int i,const unsigned int verbose=0) { time_t c=i; return string(ctime(&c)).substr(0,24); } // same, allowing for unsigned int i argument, will also work when called for double
#else
  //old string ToAscii(int i); // my C++ version to avoid the poor old c 7 bit ascii toascii function
  string CtimeStr(const time_t* c,     const unsigned int verbose=0); // my C++ String version of ctime without '\n' at end   time_t is same as unsigned int
  string CtimeStr(const unsigned int i,const unsigned int verbose=0); // same, allowing for unsigned int i argument, will also work when called for double
#endif

const char* mnemon(int i);
string ToMnemon(const string& s); // returns string with control characters replaced by mnemonics

string TimeStrucToString(const struct tm *tt); // string of time structure for print
double LocalTimberTime_to_double(const string& TimberTime,const unsigned int verbose=0); // tested in ~/c/ansiitest/TestTime.C; can be used with root   TTimeStamp(double,0)

string MyTranslate(const string& InpStr,const string& From,const string& To,const unsigned int verbose=0); // example HX:BMODE,":","-"    -->  HX-BMODE
string    FillLeft(const string& InpStr,const unsigned int Len,const char FillChar=' ',const unsigned int verbose=0); // add FillChar (usually take blank) until length len reached

const char FirstChar(const string& Str); // return the first character of a string
const char  LastChar(const string& Str); // return the last  character of a string

inline bool StartsWith(const string& Str,const string& startswith)
{
  // cout << "StartsWith debug Str=" << Str << " startswith="<< startswith << " Str.find(startswith)=" << Str.find(startswith) << " Str.length()=" << Str.length() << " startswith.length()=" << startswith.length() << endl;
  return (Str.find(startswith)!=string::npos && Str.find(startswith)==0);
}  // check if the string Str  starts with the string startswith

inline bool EndsWith(const string& Str,const string& endswith)
{
  // cout << "EndsWith debug Str=" << Str << " endswith="<< endswith << " Str.rfind(endswith)=" << Str.rfind(endswith) << " Str.length()=" << Str.length() << " endswith.length()=" << endswith.length() << endl;
  return (Str.rfind(endswith)!=string::npos && Str.rfind(endswith)==Str.length()-endswith.length());
}  // check if the string Str  ends with the string endswith

string    AddDoubleQuotes(const string& Str); // add " at beginning and end of string
string RemoveDoubleQuotes(const string& Str);     // if a string has " at beginning and end, remove these
string CleanName(const string& Str,const unsigned int verbose=0);  // replace non alphanumeric by _

inline void RemoveBlanksAtEnd(string& str)
{
  // blank can be written as " ", ' '   or   checked with  isspace
  string::size_type Pos=str.find_last_not_of(' ')+1; // position of last non blank character
  // cout << " RemoveBlanksAtEnd str=" << str << " Pos=" << Pos << '\n';
  if(Pos<str.length()) str=str.substr(0,Pos);
  // cout << " RemoveBlanksAtEnd now str=" << str << '\n';
}

void GetDirFname(const string& FullFin,string& Dir,string& Fname,const unsigned int verbose=0); // separate full filename in directory (path) and filename
string        Extension(const string& Fname,const unsigned int verbose=0);                      // given the filename like Code.C  returns the extension C
string WithoutExtension(const string& Fname,const unsigned int verbose=0);                      // given the filename like Code.C  returns the name without extension Code
void Name_Version_Extension(const string& Fname,string& Name,int& Major,int& Minor,int& Revision,string& Extension,const unsigned int verbose=0); // from Fname=libxml2.2.6.2.dylib  to Name=libxml2, Major=2 Minor=6 Revisin=2 Extension=dylib

string      ResolveHome(string Fname,        const unsigned int verbose=0); // replaces ~ and $HOME at the start of Fname
const char* ResolveHome(const char* filename,const unsigned int verbose=0); // same with char*

bool IsAlNum(const string& Str,const unsigned int verbose=0); // test if a string contains only digits and letters
bool IsPrint(const string& Str,const unsigned int verbose=0); // test if a string contains only printable characters

string DegMinSec(double Angle); // convert degrees in deg,min,sec, example DegMinSec(50.51) results in string 50o30'36"
string LongDegMinSec(double Angle); // LongDegMinSec( 50.51) results in  50o30'36" East
string LatiDegMinSec(double Angle); // LatiDegMinSec( 50.51) results in  50o30'36" North

string DegMin(double Angle);    // convert degrees in deg,min,     example DegMinSec(50.51) results in string 50o30.6'
string LongDegMin(double Angle); // LongDegMin( 50.51) results in  50o30.6' East
string LatiDegMin(double Angle); // LatiDegMin( 50.51) results in  50o30.6'North

int HourMinSecToSec(string time);   // from time string like 16:19:43  to 16*3600 + 19*60 + 43
string SecToHourMinSec(int Sec);    // opposite of HourMinSecToSec
double HourMinSec(string time);     // convert time string like 16:19:43  to 16.+19./60.+43./3600. = 16.3286
string HourMinSec(double time);     // convert double time = 16.3286 into string 16:19:43

string EnerWithUnits(double Ener);          // given Ener in GeV,     return string of number with units meV, eV, keV, MeV, GeV, TeV  depending on magnitude
string PowerWithUnits(double PowerinWatt);  // given Power in Watt,   return string of number with units mW, W, kW, MW, GW, TW  depending on magnitude
string GVoltsWithUnits(double GVolts);      // given GVolts,          return string of number with units mV, V, kV, MV, GV, TV  depending on magnitude
string CurrWithUnits(double CurrInAmps);    // given Current in Amps, return string of number with units pA, nA, muA, mA, A, kA
string FreqWithUnits(double freq);          // given Freq in Hz,      return string of number with units Hz, kHz, MHz, GHz, THz
string LengthWithUnits(double Length);      // given Length in m,     return string of number with units km, m, mm, mum, nm, pm, fm
string CrossSecWithUnits(double CrossSec);  // given CrossSec in m,   return string of number with units barn   like  b, mb, mub, nb
string TimeWithUnits(double Time);          // given Time in s, return string of number with units ps, ns, mus, ms, s, min, h

double      GetParamValue(const string& ParamName,const char* InpFname,const unsigned int verbose=0); // read file with name InpFname and look for value of Parameter with ParamName
double  GetParamValue_tfs(const string& ParamName,const char* InpFname,const unsigned int verbose=0); // read tfs file with name InpFname and look for Parameter with ParamName in tfs file header
string GetParamString_tfs(const string& ParamName,const char* InpFname,const unsigned int verbose=0); // read tfs file with name InpFname and look for Parameter with ParamName in tfs file header

//see also
// string trimming  http://en.wikipedia.org/wiki/Trim_(programming)
// for examples see also http://www.cplusplus.com/src/    for strings rather c only
// see http://en.wikipedia.org/wiki/Boost_library

#endif


/* tests  24/10/2013

 next ok  - but maybe not good check since to_string not used
 cd ~/c/MyClib ; clang++-mp-3.3 -O3 -Wall -std=c++11 -I/Users/hbu/c/MyClib -Df2cFortran -I/usr/local/cernlib/2006/include -I/usr/local/cernlib/2006/include/cfortran -ftree-vectorize -DUseAquaTerm -F/opt/local/Library/Frameworks   -c -o StrConv.o StrConv.C


 cd ~/c/MyClib ; clang++-mp-3.3 -O3 -Wall -std=c++11 -I/Users/hbu/c/MyClib -Df2cFortran -I/usr/local/cernlib/2006/include -I/usr/local/cernlib/2006/include/cfortran -ftree-vectorize -DUseAquaTerm -F/opt/local/Library/Frameworks   -c -o Conversion.o Conversion.C
    use of undeclared identifier 'to_string'

    instead next OK
 cd ~/c/MyClib ; clang -O3 -Wall -std=c++11 -I/Users/hbu/c/MyClib -Df2cFortran -I/usr/local/cernlib/2006/include -I/usr/local/cernlib/2006/include/cfortran -ftree-vectorize -DUseAquaTerm -F/opt/local/Library/Frameworks   -c -o Conversion.o Conversion.C

 */
